// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:3.1.0.0
//      SpecFlow Generator Version:3.1.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace MarsQA_1.Feature
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Add profile details")]
    public partial class AddProfileDetailsFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
#line 1 "AddProfile.feature"
#line hidden
        
        [NUnit.Framework.OneTimeSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Add profile details", "\tAs a Seller\r\n\tI want the feature to add my Profile Details\r\n\tSo that the people " +
                    "seeking for some skills can look into my details.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.OneTimeTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<NUnit.Framework.TestContext>(NUnit.Framework.TestContext.CurrentContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 6
#line hidden
#line 7
 testRunner.Given("I login to the website", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding language details with valid data")]
        [NUnit.Framework.CategoryAttribute("ignore")]
        public virtual void AddingLanguageDetailsWithValidData()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding language details with valid data", null, new string[] {
                        "ignore"});
#line 12
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Level"});
                table1.AddRow(new string[] {
                            "Something",
                            "Fluent"});
#line 13
 testRunner.When("I save \'Language\' details as follows:", ((string)(null)), table1, "When ");
#line hidden
#line 16
 testRunner.Then("my profile page displays the newly added \'Language\' details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 17
 testRunner.And("the success message \"Something has been added to your languages\" is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding education details with valid data")]
        [NUnit.Framework.CategoryAttribute("ignore")]
        public virtual void AddingEducationDetailsWithValidData()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding education details with valid data", null, new string[] {
                        "ignore"});
#line 21
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstituteName",
                            "Country",
                            "DegreeTitle",
                            "DegreeName",
                            "YearOfGraduation"});
                table2.AddRow(new string[] {
                            "University of Auckland",
                            "New Zealand",
                            "B.Sc",
                            "Bachelor of Science",
                            "2000"});
#line 22
 testRunner.When("I save \'Education\' details as follows:", ((string)(null)), table2, "When ");
#line hidden
#line 25
 testRunner.Then("my profile page displays the newly added Education details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 26
 testRunner.And("the success message \"Education has been added\" is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding certification details with valid data")]
        [NUnit.Framework.CategoryAttribute("ignore")]
        public virtual void AddingCertificationDetailsWithValidData()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding certification details with valid data", null, new string[] {
                        "ignore"});
#line 30
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Organisation",
                            "Year"});
                table3.AddRow(new string[] {
                            "Foundation Level",
                            "ISTQB",
                            "2020"});
#line 31
 testRunner.When("I save \'Certification\' details as follows:", ((string)(null)), table3, "When ");
#line hidden
#line 34
 testRunner.Then("my profile page displays the newly added \'Certification\' details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 35
 testRunner.And("the success message \"Foundation Level has been added to your certification\" is di" +
                        "splayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding skills details with valid data")]
        [NUnit.Framework.CategoryAttribute("ignore")]
        public virtual void AddingSkillsDetailsWithValidData()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding skills details with valid data", null, new string[] {
                        "ignore"});
#line 39
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Level"});
                table4.AddRow(new string[] {
                            "Selenium",
                            "Expert"});
#line 40
 testRunner.When("I save \'Skill\' details as follows:", ((string)(null)), table4, "When ");
#line hidden
#line 43
 testRunner.Then("my profile page displays the newly added \'Skill\' details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 44
 testRunner.And("the success message \"Selenium has been added to your skills\" is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding profile description with valid data")]
        [NUnit.Framework.CategoryAttribute("ignore")]
        public virtual void AddingProfileDescriptionWithValidData()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding profile description with valid data", null, new string[] {
                        "ignore"});
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 49
 testRunner.When("I save the the following description", "I\'m a tester. Please contact me for testing skills.", ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
 testRunner.Then("my profile page displays the newly added \'Description\' details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 54
 testRunner.And("the success message \"Description has been saved successfully\" is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding profile photo")]
        [NUnit.Framework.CategoryAttribute("ignore")]
        public virtual void AddingProfilePhoto()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding profile photo", null, new string[] {
                        "ignore"});
#line 58
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 59
 testRunner.When("I upload a photo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 60
 testRunner.Then("my profile displays the newly uploaded profile photo", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 61
 testRunner.And("the success message \"Profile phooto has been uploaded successfully\" is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding location")]
        [NUnit.Framework.CategoryAttribute("ignore")]
        public virtual void AddingLocation()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding location", null, new string[] {
                        "ignore"});
#line 65
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 66
 testRunner.When("I save location as \"Auckland, New Zealand\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 67
 testRunner.Then("my profile displays the newly added location", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 68
 testRunner.And("the success message \"Location has been saved successfully\" is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding more than 4 language details are not allowed")]
        [NUnit.Framework.CategoryAttribute("runTest")]
        public virtual void AddingMoreThan4LanguageDetailsAreNotAllowed()
        {
            string[] tagsOfScenario = new string[] {
                    "runTest"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding more than 4 language details are not allowed", null, new string[] {
                        "runTest"});
#line 78
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Level"});
                table5.AddRow(new string[] {
                            "Spanish",
                            "Fluent"});
                table5.AddRow(new string[] {
                            "French",
                            "Fluent"});
                table5.AddRow(new string[] {
                            "German",
                            "Fluent"});
#line 79
 testRunner.Given("I already have 3 \'Language\' details as follows:", ((string)(null)), table5, "Given ");
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Level"});
                table6.AddRow(new string[] {
                            "English",
                            "Fluent"});
#line 84
 testRunner.When("I save another \'Language\' details as follows:", ((string)(null)), table6, "When ");
#line hidden
#line 87
 testRunner.Then("my profile page displays the newly added \'Language\' details", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 88
 testRunner.And("the success message \"English has been added to your languages\" is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
 testRunner.But("I cannot add another \'Language\' detail", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "But ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding language details with invalid data")]
        [NUnit.Framework.CategoryAttribute("runTest")]
        [NUnit.Framework.TestCaseAttribute("", "Fluent", "Please enter language and level", null)]
        [NUnit.Framework.TestCaseAttribute("German", "", "Please enter language and level", null)]
        [NUnit.Framework.TestCaseAttribute("\'\'English  \'\'", "Basic", "Please enter language and level", null)]
        [NUnit.Framework.TestCaseAttribute("\'\' English\'\'", "Basic", "Please enter language and level", null)]
        [NUnit.Framework.TestCaseAttribute("\'\' \'\'", "", "Please enter language and level", null)]
        [NUnit.Framework.TestCaseAttribute("@#$", "Native/Bilingual", "Please enter language and level", null)]
        [NUnit.Framework.TestCaseAttribute("12345", "Native/Bilingual", "Please enter language and level", null)]
        [NUnit.Framework.TestCaseAttribute("English", "Conversational", "Duplicated data", null)]
        [NUnit.Framework.TestCaseAttribute("English", "Fluent", "This language is already exist in your language list.", null)]
        public virtual void AddingLanguageDetailsWithInvalidData(string name, string level, string error, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "runTest"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding language details with invalid data", null, @__tags);
#line 94
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Level"});
                table7.AddRow(new string[] {
                            "English",
                            "Fluent"});
#line 95
 testRunner.Given("I already have 1 \'Language\' details as follows:", ((string)(null)), table7, "Given ");
#line hidden
#line 98
 testRunner.When(string.Format("I add language detail with name \'{0}\' and level \'{1}\'", name, level), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 99
 testRunner.Then(string.Format("the error message \'{0}\' is displayed", error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 100
 testRunner.And("the detail is not saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding skill details with invalid data")]
        [NUnit.Framework.CategoryAttribute("ignore")]
        [NUnit.Framework.TestCaseAttribute("", "Intermediate", "Please enter skill and experience level", null)]
        [NUnit.Framework.TestCaseAttribute("Cypress", "", "Please enter skill and experience level", null)]
        [NUnit.Framework.TestCaseAttribute("\'\'Cypress  \'\'", "Beginner", "Please enter skill and experience level", null)]
        [NUnit.Framework.TestCaseAttribute("\'\' Cypress\'\'", "Beginner", "Please enter skill and experience level", null)]
        [NUnit.Framework.TestCaseAttribute("\'\' \'\'", "", "Please enter skill and experience level", null)]
        [NUnit.Framework.TestCaseAttribute("@#$", "Beginner", "Please enter skill and experience level", null)]
        [NUnit.Framework.TestCaseAttribute("12345", "Beginner", "Please enter skill and experience level", null)]
        [NUnit.Framework.TestCaseAttribute("Cypress", "Expert", "Duplicated data", null)]
        [NUnit.Framework.TestCaseAttribute("Cypress", "Beginner", "This skill is already exist in your skill list.", null)]
        public virtual void AddingSkillDetailsWithInvalidData(string name, string level, string error, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding skill details with invalid data", null, @__tags);
#line 116
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Level"});
                table8.AddRow(new string[] {
                            "Cypress",
                            "Beginner"});
#line 117
 testRunner.Given("I already have 1 \'Skill\' details as follows:", ((string)(null)), table8, "Given ");
#line hidden
#line 120
 testRunner.When(string.Format("I add skill detail with name \'{0}\' and level \'{1}\'", name, level), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 121
 testRunner.Then(string.Format("the error message \'{0}\' is displayed", error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 122
 testRunner.And("the detail is not saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding education details with invalid data")]
        [NUnit.Framework.CategoryAttribute("ignore")]
        [NUnit.Framework.TestCaseAttribute("", "New Zealand", "B.Sc", "Bachelor of Science", "2000", "Please enter all the fields", null)]
        [NUnit.Framework.TestCaseAttribute("University of Auckland", "", "B.Sc", "Bachelor of Science", "2000", "Please enter all the fields", null)]
        [NUnit.Framework.TestCaseAttribute("University of Auckland", "New Zealand", "", "", "2000", "Please enter all the fields", null)]
        [NUnit.Framework.TestCaseAttribute("University of Auckland", "New Zealand", "B.Sc", "Bachelor of Science", "", "Please enter all the fields", null)]
        [NUnit.Framework.TestCaseAttribute("\'\'University of Auckland \'\'", "New Zealand", "B.Sc", "Bachelor of Science", "2000", "Please enter all the fields", null)]
        [NUnit.Framework.TestCaseAttribute("\'\' University of Auckland\'\'", "New Zealand", "B.Sc", "Bachelor of Science", "2000", "Please enter all the fields", null)]
        [NUnit.Framework.TestCaseAttribute("University of Auckland", "New Zealand", "B.Sc", "\'\'Bachelor of Science \'\'", "2000", "Please enter all the fields", null)]
        [NUnit.Framework.TestCaseAttribute("University of Auckland", "New Zealand", "B.Sc", "\'\' Bachelor of Science\'\'", "2000", "Please enter all the fields", null)]
        [NUnit.Framework.TestCaseAttribute("\'\' \'\'", "New Zealand", "B.Sc", "Bachelor of Science", "2000", "Please enter all the fields", null)]
        [NUnit.Framework.TestCaseAttribute("University of Auckland", "New Zealand", "B.Sc", "\'\' \'\'", "2000", "Please enter all the fields", null)]
        [NUnit.Framework.TestCaseAttribute("University of Auckland", "New Zealand", "B.Sc", "\'\'Bachelor of Science \'\'", "2000", "Please enter all the fields", null)]
        [NUnit.Framework.TestCaseAttribute("University of Auckland", "New Zealand", "B.Sc", "\'\' Bachelor of Science\'\'", "2000", "Please enter all the fields", null)]
        [NUnit.Framework.TestCaseAttribute("University of Auckland", "New Zealand", "B.Sc", "\'\' \'\'", "2000", "Please enter all the fields", null)]
        [NUnit.Framework.TestCaseAttribute("12345", "New Zealand", "B.Sc", "Bachelor of Science", "2000", "Please enter all the fields", null)]
        [NUnit.Framework.TestCaseAttribute("University of Auckland", "New Zealand", "B.Sc", "12345", "2000", "Please enter all the fields", null)]
        [NUnit.Framework.TestCaseAttribute("University of Auckland", "New Zealand", "B.Sc", "Bachelor of Science", "1999", "Duplicated data", null)]
        [NUnit.Framework.TestCaseAttribute("University of Auckland", "New Zealand", "B.Sc", "Bachelor of Science", "2000", "This skill is already exist in your skill list.", null)]
        [NUnit.Framework.TestCaseAttribute("@#$", "New Zealand", "B.Sc", "Bachelor of Science", "2000", "Please enter valid values for all the fields", null)]
        [NUnit.Framework.TestCaseAttribute("University of Auckland", "New Zealand", "B.Sc", "#@$", "2000", "Please enter valid values for all the fields", null)]
        public virtual void AddingEducationDetailsWithInvalidData(string instituteName, string country, string degreeTitle, string degreeName, string yearOfGraduation, string error, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding education details with invalid data", null, @__tags);
#line 138
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                            "InstituteName",
                            "Country",
                            "DegreeTitle",
                            "DegreeName",
                            "YearOfGraduation"});
                table9.AddRow(new string[] {
                            "University of Auckland",
                            "New Zealand",
                            "B.Sc",
                            "Bachelor of Science",
                            "2000"});
#line 139
 testRunner.Given("I already have 1 \'Education\' details as follows:", ((string)(null)), table9, "Given ");
#line hidden
#line 142
 testRunner.When(string.Format("I add education detail with institute \'{0}\', country \'{1}\', title \'<title>\', name" +
                            " \'{2}\', and graduation year \'{3}\'", instituteName, country, degreeName, yearOfGraduation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 143
 testRunner.Then(string.Format("the error message \'{0}\' is displayed", error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 144
 testRunner.And("the detail is not saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding certification details with invalid data")]
        [NUnit.Framework.CategoryAttribute("ignore")]
        [NUnit.Framework.TestCaseAttribute("", "ISTQB", "2020", "Please enter Certification Name, Certification From and Certification Year", null)]
        [NUnit.Framework.TestCaseAttribute("Foundation Level", "", "2020", "Please enter Certification Name, Certification From and Certification Year", null)]
        [NUnit.Framework.TestCaseAttribute("Foundation Level", "ISTQB", "", "Please enter Certification Name, Certification From and Certification Year", null)]
        [NUnit.Framework.TestCaseAttribute("@#$", "ISTQB", "2020", "Please enter Certification Name, Certification From and Certification Year", null)]
        [NUnit.Framework.TestCaseAttribute("Foundation Level", "@#$", "2020", "Please enter Certification Name, Certification From and Certification Year", null)]
        [NUnit.Framework.TestCaseAttribute("12345", "@#$", "2020", "Please enter Certification Name, Certification From and Certification Year", null)]
        [NUnit.Framework.TestCaseAttribute("Foundation Level", "12345", "2020", "Please enter Certification Name, Certification From and Certification Year", null)]
        [NUnit.Framework.TestCaseAttribute("Foundation Level", "ISTQB", "2020", "This information is already exist.", null)]
        [NUnit.Framework.TestCaseAttribute("Foundation Level", "ISTQB", "2019", "Duplicated data", null)]
        [NUnit.Framework.TestCaseAttribute("\'\'Foundation Level \'\'", "ISTQB", "2020", "Please enter valid Certification Name, Certification From and Certification Year", null)]
        [NUnit.Framework.TestCaseAttribute("\'\' Foundation Level\'\'", "ISTQB", "2020", "Please enter valid Certification Name, Certification From and Certification Year", null)]
        [NUnit.Framework.TestCaseAttribute("Foundation Level", "\'\'ISTQB \'\'", "2020", "Please enter valid Certification Name, Certification From and Certification Year", null)]
        [NUnit.Framework.TestCaseAttribute("Foundation Level", "\'\' ISTQB\'\'", "2020", "Please enter valid Certification Name, Certification From and Certification Year", null)]
        public virtual void AddingCertificationDetailsWithInvalidData(string name, string organisation, string year, string error, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "ignore"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding certification details with invalid data", null, @__tags);
#line 170
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Organisation",
                            "Year"});
                table10.AddRow(new string[] {
                            "Foundation Level",
                            "ISTQB",
                            "2020"});
#line 171
 testRunner.Given("I already have 1 \'Certification\' details as follows:", ((string)(null)), table10, "Given ");
#line hidden
#line 174
 testRunner.When(string.Format("I add certification detail with name \'{0}\', level \'{1}\', and year \'{2}\'", name, organisation, year), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 175
 testRunner.Then(string.Format("the error message \'{0}\' is displayed", error), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 176
 testRunner.And("the detail is not saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Adding language details with valid data on multiple tabs")]
        [NUnit.Framework.CategoryAttribute("runTest")]
        public virtual void AddingLanguageDetailsWithValidDataOnMultipleTabs()
        {
            string[] tagsOfScenario = new string[] {
                    "runTest"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Adding language details with valid data on multiple tabs", null, new string[] {
                        "runTest"});
#line 200
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 201
 testRunner.Given("I have opened the profile page on another tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
                TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Level"});
                table11.AddRow(new string[] {
                            "Spanish",
                            "Fluent"});
#line 202
 testRunner.And("I already have 1 \'Language\' details as follows:", ((string)(null)), table11, "And ");
#line hidden
#line 205
 testRunner.And("I switch back to the previous tab", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                            "Name",
                            "Level"});
                table12.AddRow(new string[] {
                            "German",
                            "Fluent"});
#line 206
 testRunner.When("I save another \'Language\' details as follows:", ((string)(null)), table12, "When ");
#line hidden
#line 209
 testRunner.Then("the error message \'Please refresh the page.\' is displayed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 210
 testRunner.And("the detail is not saved", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Long texts are truncated and full texts are shown on hover")]
        [NUnit.Framework.CategoryAttribute("ignore")]
        public virtual void LongTextsAreTruncatedAndFullTextsAreShownOnHover()
        {
            string[] tagsOfScenario = new string[] {
                    "ignore"};
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Long texts are truncated and full texts are shown on hover", null, new string[] {
                        "ignore"});
#line 214
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 6
this.FeatureBackground();
#line hidden
#line 215
 testRunner.Given("I have added a skill with name \'The name of this skill is very long for no reason" +
                        " and should be truncated\' and level \'Beginner\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 216
 testRunner.When("I hover over the truncated skill name", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 217
 testRunner.Then("I can see the tooltip with the full text \"The name of this skill is very long for" +
                        " no reason and should be truncated\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
